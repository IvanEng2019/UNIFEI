#include <stdio.h>
#include <stdlib.h>
 
typedef unsigned long contador;
 
typedef struct Pessoas{
  int Chave;
  char name[100];
} Pessoas;
 
#include <string.h>
 
/** EDITAR APENAS AS 3 FUNCOES ABAIXO */
/*ordena P[1...n]*/
void bubble(Pessoas *P, int n, contador *num_comparacoes, contador *num_movimentos){
    int i, j;
    Pessoas aux;
    *num_comparacoes = 0;
    *num_movimentos = 0;
 
    for(i = 1; i <= n-1; i++)
    {
        for(j = n; j >= i + 1;j--){
            if(P[j].Chave < P[j-1].Chave){
                aux = P[j];
                P[j] = P[j-1];
                P[j-1] = aux;
                *num_movimentos += 3;
            }
            *num_comparacoes +=1;
        }
    }
}
 
/*ordena P[1...n]*/
void selection(Pessoas *P, int n, contador *num_comparacoes, contador *num_movimentos){
    int i, j, Min;
    Pessoas x;
    *num_comparacoes = 0;
    *num_movimentos = 0;
 
    for (i = 1; i <= n - 1; i++){
        Min = i;
        for (j = i + 1; j <= n; j++){
            if (P[j].Chave < P[Min].Chave)
            {
                Min = j;
            }
            *num_comparacoes += 1;
        }
        x = P[Min];
        P[Min] = P[i];
        P[i] = x;
        *num_movimentos += 3;
    }
}
 
/*ordena P[1...n]*/
void insertion(Pessoas *P, int n, contador *num_comparacoes, contador *num_movimentos){
    int i, j;
    Pessoas x;
    *num_comparacoes = 0;
    *num_movimentos = 0;
 
    for(i = 2; i <= n; i++){
        x = P[i];
        j = i - 1;
        P[0] = x; /*sentinela */
        while(x.Chave < P[j].Chave){
            *num_comparacoes += 1;
            P[j+1] = P[j];
            j--;
        }
        *num_comparacoes += 1;
        *num_movimentos += 1;
        P[j+1] = x;
    }
    *num_movimentos += *num_comparacoes;
}
 
 
void copia_pessoas(Pessoas * destino, Pessoas * origem, int n){
  for(int i = 1; i <= n; i++){
    destino[i] = origem[i];
  }
}
 
 
void verifica_ordenacao(Pessoas * P, int n){
  for(int i = 2; i <= n; i++){
    if(P[i].Chave < P[i-1].Chave){
      printf("Ordenacao invalida.\n");
      exit(EXIT_FAILURE);
    }
  }
}
 
 
int main(int argc, char * argv[]){
  int n;
  Pessoas * P, * Q;
  contador num_comparacoes, num_movimentos;
   
  scanf("%d\n", &n);
 
  P = calloc(sizeof(Pessoas), n+1); //+1 para a sentinela em P[0]
  Q = calloc(sizeof(Pessoas), n+1); //+1 para a sentinela em P[0]
  if(P==NULL){
    perror("Error while allocating memory.\n");
    exit(EXIT_FAILURE);
  }
 
  for(int i = 1; i <= n; i++){
    scanf("%d ", &(P[i].Chave));
    fgets(P[i].name, 100, stdin);
    P[i].name[strlen(P[i].name) - 1] = '\0';
  }
 
  copia_pessoas(Q, P, n);
 
 
  bubble(P, n, &num_comparacoes, &num_movimentos);
  printf("%lu %lu\n", num_comparacoes, num_movimentos);
 
  verifica_ordenacao(P, n);
  copia_pessoas(P, Q, n);
 
  selection(P, n, &num_comparacoes, &num_movimentos);
  printf("%lu %lu\n", num_comparacoes, num_movimentos);
 
  verifica_ordenacao(P, n);
  copia_pessoas(P, Q, n);
 
  insertion(P, n, &num_comparacoes, &num_movimentos);
  printf("%lu %lu\n", num_comparacoes, num_movimentos);
 
  verifica_ordenacao(P, n);
 
  /*for(int i = 1; i <= n; i++){
    printf("%d %s\n", P[i].Chave, P[i].name);
  }*/
  return 0;
}